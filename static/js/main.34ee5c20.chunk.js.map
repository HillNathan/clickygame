{"version":3,"sources":["components/Header/index.js","components/Banner/index.js","components/Game/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","message","currentScore","bestScore","Banner","Game","class","logos","map","elem","i","src","image","alt","onClick","logoClick","id","Footer","data","require","shuffleArray","array","length","j","Math","floor","random","temp","App","state","clicked","theId","includes","setMessage","setState","incrementScore","push","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iiDAsBeA,MApBf,SAAgBC,GACZ,OACI,yBAAKC,UAAU,4BACX,yBAAKA,UAAU,oBACX,4CAGJ,yBAAKA,UAAU,oCACX,4BAAMD,EAAME,UAGhB,yBAAKD,UAAU,8BAAf,kBACmB,8BAAQD,EAAMG,cAC7B,6BAFJ,kBAGmB,8BAAQH,EAAMI,cCJ9BC,MAVf,WACI,OACI,yBAAKJ,UAAU,yBACX,wBAAIA,UAAU,aAAd,eACA,wBAAIA,UAAU,SACd,6GCcGK,MAnBf,SAAcN,GACV,OACI,yBAAKO,MAAM,aACP,yBAAKA,MAAM,uCACNP,EAAMQ,MAAMC,KAAI,SAACC,EAAKC,GACnB,OACI,yBAAKJ,MAAM,iCACP,yBAAKK,IAAKF,EAAKG,MACXN,MAAM,SAASO,IAAKJ,EAAKI,IACzBC,QAAS,kBAAMf,EAAMgB,UAAUN,EAAKO,cCDrDC,MARf,WACI,OACI,gCACI,4DCCRC,EAAOC,EAAQ,IAEnB,SAASC,EAAaC,GACpB,IAAK,IAAIX,EAAIW,EAAMC,OAAS,EAAGZ,EAAI,EAAGA,IAAK,CACvC,IAAIa,EAAIC,KAAKC,MAAMD,KAAKE,UAAYhB,EAAI,IACpCiB,EAAON,EAAMX,GACjBW,EAAMX,GAAKW,EAAME,GACjBF,EAAME,GAAKI,GAIjBP,EAAaF,G,IAqDEU,E,2MAjDbC,MAAQ,CACN3B,aAAc,EACdC,UAAW,EACXF,QAAS,+BACTM,MAAOW,EACPY,QAAS,I,EAGXf,UAAY,SAACgB,GACP,EAAKF,MAAMC,QAAQE,SAASD,IAC9B,EAAKE,WAAW,sEACZ,EAAKJ,MAAM3B,aAAe,EAAK2B,MAAM1B,WAAW,EAAK+B,SAAS,CAAC/B,UAAW,EAAK0B,MAAM3B,eACzF,EAAKgC,SAAS,CAAEJ,QAAS,GAAI5B,aAAc,MAG3CkB,EAAaF,GACb,EAAKiB,iBACL,EAAKF,WAAW,IAChB,EAAKJ,MAAMC,QAAQM,KAAKL,K,EAK5BE,WAAa,SAAChC,GACZ,EAAKiC,SAAS,CAAEjC,a,EAGlBkC,eAAiB,WACf,EAAKD,SAAS,CAAEhC,aAAc,EAAK2B,MAAM3B,aAAe,K,wEAIxD,OACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,CACEC,QAASoC,KAAKR,MAAM5B,QACpBC,aAAcmC,KAAKR,MAAM3B,aACzBC,UAAWkC,KAAKR,MAAM1B,YAExB,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEY,UAAWsB,KAAKtB,UAChBR,MAAO8B,KAAKR,MAAMtB,QACpB,kBAAC,EAAD,W,GA7CU+B,aCPEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.34ee5c20.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <nav className=\"navbar sticky full-width\">\r\n            <div className=\"navbar-brand p-4\">\r\n                <h4>Clicky Game</h4>\r\n            </div>\r\n                    \r\n            <div className=\"header header-center text-center\">\r\n                <h4>{ props.message }</h4>\r\n            </div>\r\n\r\n            <div className=\"header header-left p-2 m-2\">\r\n                Current Score: <span>{ props.currentScore }</span>\r\n                <hr />\r\n                Highest Score: <span>{ props.bestScore }</span>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\n\r\nfunction Banner() {\r\n    return (\r\n        <div className=\"jumbotron text-center\">\r\n            <h1 className=\"display-2\">Clicky Game</h1>\r\n            <hr className=\"my-4\" />\r\n            <h5>Click on an image to earn a point, but don't click an image more than once!</h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Banner","import React from \"react\"\r\n\r\nfunction Game(props) {\r\n    return (\r\n        <div class=\"container\">\r\n            <div class=\"row justify-content-between p-5 m-2\">\r\n                {props.logos.map((elem,i) => {\r\n                    return (\r\n                        <div class=\"col text-center p-4 hero-logo\">\r\n                            <img src={elem.image} \r\n                                class=\"clicky\" alt={elem.alt} \r\n                                onClick={() => props.logoClick(elem.id)}/>\r\n                        </div>\r\n                    )\r\n                    })\r\n                }\r\n            </div>         \r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Game","import React from \"react\"\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer>\r\n            <h4>Clicky Game by Nathan Hill</h4>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React, { Component } from 'react';\nimport Header from \"./components/Header\"\nimport Banner from \"./components/Banner\"\nimport Game from \"./components/Game\"\nimport Footer from \"./components/Footer\"\n\nlet data = require(\"./data.json\")\n\nfunction shuffleArray(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n  }\n}\n\nshuffleArray(data)\n\nclass App extends Component {\n\n  state = {\n    currentScore: 0,\n    bestScore: 0,\n    message: \"Click on any image to begin!\",\n    logos: data,\n    clicked: []\n  }\n\n  logoClick = (theId) => {\n    if (this.state.clicked.includes(theId)) {\n      this.setMessage('Sorry, you have lost the game. Click an image to start a new game!')\n      if (this.state.currentScore > this.state.bestScore) this.setState({bestScore: this.state.currentScore})\n      this.setState({ clicked: [], currentScore: 0 })\n    }\n    else {\n      shuffleArray(data)\n      this.incrementScore()\n      this.setMessage('')\n      this.state.clicked.push(theId)\n    }\n\n  }\n\n  setMessage = (message) => {\n    this.setState({ message })\n  }\n\n  incrementScore = () => {\n    this.setState({ currentScore: this.state.currentScore + 1 })\n  }\n\n  render () {\n    return (\n      <div className=\"app\">\n        <Header \n          message={this.state.message} \n          currentScore={this.state.currentScore} \n          bestScore={this.state.bestScore} \n        />\n        <Banner />\n        <Game \n          logoClick={this.logoClick}\n          logos={this.state.logos} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}